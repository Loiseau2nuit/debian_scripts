#!/bin/bash
# ====================================================================
# Websites maintenance tool : backups and clones
# Auteur : (c) Loiseau2nuit 2025
# Version : 0.1
# Status : UNTESTED YET ! NOT FOR PRODUCTION PURPOSE !
# ====================================================================
# - Manual backups (e.g. : before upgrades or heavy maintenance)
# - Working clones creation for test purposes (files + base + nginx conf)
# ====================================================================

# --- CONFIG ---------------------------------------------------------
WWW_ROOT="/var/www"
BACKUP_ROOT="/var/backups/manual"
NGINX_SITES="/etc/nginx/sites-available"
NGINX_ENABLED="/etc/nginx/sites-enabled"
# DB_USER="root"
# DB_PASS="motdepasse"      # ou utiliser ~/.my.cnf
PHP_SOCK="/run/php/php8.2-fpm.sock"  # √† adapter selon ta version PHP
TMP_DIR="/tmp/site_tool"
mkdir -p "$BACKUP_ROOT" "$TMP_DIR"

# --- MySQL CONFIG -----------------------------------------

# Valeurs par d√©faut (au cas o√π ~/.my.cnf n'existe pas)
DB_USER_DEFAULT="root"
DB_PASS_DEFAULT=""

# Si un fichier ~/.my.cnf existe, on essaie d‚Äôen extraire les infos
if [ -f ~/.my.cnf ]; then
  echo "üîç Fichier ~/.my.cnf d√©tect√© ‚Äî utilisation des identifiants qu‚Äôil contient."
  DB_USER=$(awk -F= '/user *=/ {gsub(/[[:space:]]/, "", $2); print $2}' ~/.my.cnf | tail -n1)
  DB_PASS=$(awk -F= '/password *=/ {gsub(/[[:space:]]/, "", $2); print $2}' ~/.my.cnf | tail -n1)
else
  echo "‚ö†Ô∏è  Aucun ~/.my.cnf trouv√© ‚Äî utilisation des valeurs par d√©faut."
  DB_USER="$DB_USER_DEFAULT"
  DB_PASS="$DB_PASS_DEFAULT"
fi

# On pr√©pare les options pour les appels √† mysql / mysqldump
# (ne met pas --password si la variable est vide)
MYSQL_OPTS=("-u${DB_USER}")
[ -n "$DB_PASS" ] && MYSQL_OPTS+=("-p${DB_PASS}")


# --- FUNCTIONS ------------------------------------------------------

list_sites() {
  echo "Sites disponibles :"
  ls -1 "$WWW_ROOT"
}

select_site() {
  list_sites
  echo
  read -rp "Nom du site √† traiter (ou 'all') : " SITE
  if [ "$SITE" = "all" ]; then
    SITES=$(ls -1 "$WWW_ROOT")
  else
    SITES="$SITE"
  fi
}

backup_site() {
  for SITE in $SITES; do
    SITE_PATH="$WWW_ROOT/$SITE"
    [ ! -d "$SITE_PATH" ] && echo "‚ö†Ô∏è  Dossier $SITE_PATH introuvable" && continue

    DB_NAME=$(grep -oP "(?<=DB_NAME[='\"])[^'\"]+" "$SITE_PATH"/config* 2>/dev/null | head -n1)
    [ -z "$DB_NAME" ] && echo "‚ö†Ô∏è  Base introuvable dans la config du site $SITE" && continue

    DATE=$(date +"%F_%H-%M-%S")
    DEST="$BACKUP_ROOT/${SITE}_${DATE}"
    mkdir -p "$DEST"

    echo "üîπ Sauvegarde du site $SITE..."
    tar -cJf "$DEST/${SITE}.tar.xz" -C "$WWW_ROOT" "$SITE"

    echo "üîπ Sauvegarde de la base $DB_NAME..."
    mysqldump "${MYSQL_OPTS[@]}" --add-drop-table "$DB_NAME" | gzip > "$DEST/${DB_NAME}.sql.gz"

    echo "‚úÖ Sauvegarde de $SITE termin√©e ‚Üí $DEST"
    echo
  done
}

clone_site() {
  list_sites
  echo
  read -rp "Site √† dupliquer : " SRC
  SRC_PATH="$WWW_ROOT/$SRC"
  [ ! -d "$SRC_PATH" ] && echo "‚ùå Site source introuvable" && exit 1

  read -rp "Nom du site de test (ex: ${SRC}-test) : " DEST
  DEST_PATH="$WWW_ROOT/$DEST"
  if [ -d "$DEST_PATH" ]; then
    echo "‚ùå Le dossier $DEST_PATH existe d√©j√†."
    exit 1
  fi

  # --- Copie fichiers
  echo "üìÅ Copie du r√©pertoire..."
  cp -a "$SRC_PATH" "$DEST_PATH"

  # --- Base de donn√©es
  SRC_DB=$(grep -oP "(?<=DB_NAME[='\"])[^'\"]+" "$SRC_PATH"/config* 2>/dev/null | head -n1)
  [ -z "$SRC_DB" ] && echo "‚ö†Ô∏è  Impossible de d√©terminer la BDD source." && exit 1
  DEST_DB="${SRC_DB}_test"

  echo "üóÉÔ∏è  Clonage de la base de donn√©es ($SRC_DB ‚Üí $DEST_DB)..."
  mysql "${MYSQL_OPTS[@]}" -e "DROP DATABASE IF EXISTS \`$DEST_DB\`; CREATE DATABASE \`$DEST_DB\`;"
  mysqldump "${MYSQL_OPTS[@]}" "$SRC_DB" | mysql "${MYSQL_OPTS[@]}" "$DEST_DB"

  # --- Configuration PHP
  echo "--------------------------------------------------"
  echo "üîç Recherche des versions PHP install√©es..."
  PHP_VERSIONS_AVAILABLE=$(ls /run/php/php*-fpm.sock 2>/dev/null | sed -E 's|/run/php/php([0-9.]+)-fpm.sock|\1|' | sort -u)

  if [ -z "$PHP_VERSIONS_AVAILABLE" ]; then
    echo "‚ö†Ô∏è  Aucune version PHP-FPM d√©tect√©e sur le syst√®me."
  else
    echo "Versions PHP disponibles :"
    echo "$PHP_VERSIONS_AVAILABLE" | sed 's/^/  - /'
  fi

  echo
  read -rp "Version PHP souhait√©e pour le clone (ex: 8.2) : " PHP_VER
  PHP_SOCK="/run/php/php${PHP_VER}-fpm.sock"

  if [ ! -S "$PHP_SOCK" ]; then
    echo "‚ö†Ô∏è  PHP ${PHP_VER} non install√©. Souhaitez-vous l‚Äôinstaller ? (o/n)"
    read -r install_choice
    if [[ "$install_choice" =~ ^[oOyY]$ ]]; then
      echo "üì¶ Installation de PHP ${PHP_VER}..."
      SUDO=$(command -v sudo >/dev/null 2>&1 && echo "sudo" || echo "")
      ${SUDO} apt-get update -qq
      ${SUDO} apt-get install -y php${PHP_VER}-cli php${PHP_VER}-common \
        php${PHP_VER}-{apcu,bz2,curl,gd,imagick,imap,intl,ldap,mbstring,mysql,opcache,readline,snmp,soap,xml,xmlrpc,zip} \
        php${PHP_VER}-fpm
    else
      echo "‚ùå Annulation : PHP ${PHP_VER} requis non pr√©sent."
      exit 1
    fi
  fi

  echo "‚úÖ Utilisation du socket PHP : $PHP_SOCK"

  # --- Modification config site
  echo "‚öôÔ∏è  Ajustement du fichier de configuration..."
  find "$DEST_PATH" -type f -exec sed -i "s/$SRC_DB/$DEST_DB/g" {} +

  # --- Configuration Nginx
  echo "üåê G√©n√©ration de la configuration Nginx..."
  NGINX_CONF="$NGINX_SITES/$DEST.conf"
  SERVER_NAME="${DEST}.local"

  cat > "$NGINX_CONF" <<EOF
server {
    listen 80;
    server_name $SERVER_NAME;
    root $DEST_PATH;

    index index.php index.html;
    access_log /var/log/nginx/${DEST}_access.log;
    error_log /var/log/nginx/${DEST}_error.log;

    location / {
        try_files \$uri \$uri/ /index.php?\$args;
    }

    location ~ \.php\$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:$PHP_SOCK;
    }
}
EOF

  ln -s "$NGINX_CONF" "$NGINX_ENABLED/$DEST.conf" 2>/dev/null || true
  nginx -t && systemctl reload nginx

  echo
  echo "‚úÖ Copie de test d√©ploy√©e avec succ√®s !"
  echo "URL : http://$SERVER_NAME/"
  echo "BDD : $DEST_DB"
  echo "PHP : $PHP_VER"
}

main_menu() {
  echo "=================================================="
  echo "     Outil de gestion de sites web (manuel)"
  echo "=================================================="
  echo "1) Sauvegarde d‚Äôun site"
  echo "2) Cr√©ation d‚Äôune copie de test"
  echo "3) Quitter"
  echo "--------------------------------------------------"
  read -rp "Choix : " choice

  case $choice in
    1)
      select_site
      backup_site
      ;;
    2)
      clone_site
      ;;
    3)
      echo "Au revoir üëã"
      exit 0
      ;;
    *)
      echo "Choix invalide"
      ;;
  esac
}

# --- EXECUTION ------------------------------------------------------
main_menu
